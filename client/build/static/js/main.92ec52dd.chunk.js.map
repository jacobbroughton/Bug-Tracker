{"version":3,"sources":["reducers/reducer.js","reducers/index.js","store.js","contexts/auth0-context.js","utils/history.js","components/textState.js","components/pages/Home.js","components/NavBar.js","components/pages/Profile.js","App.js","serviceWorker.js","index.js"],"names":["counter","state","action","type","rootReducer","combineReducers","reducer","store","createStore","Auth0Context","createContext","Auth0Provider","auth0Client","isLoading","isAuthenticated","user","config","domain","process","client_id","redirect_uri","window","location","origin","initializeAuth0","a","async","createAuth0Client","setState","search","includes","handleRedirectCallback","getUser","history","replaceState","document","title","pathname","console","log","this","children","props","configObject","loginWithRedirect","getTokenSilently","getIdTokenClaims","logout","Provider","value","Component","createBrowserHistory","RevealText","Home","useSelector","useDispatch","className","NavBar","to","Profile","App","useContext","onClick","given_name","exact","path","component","Boolean","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.92ec52dd.chunk.js","sourcesContent":["const counter = (state = 1, action) => {\n    switch(action.type) {\n        case \"INCREMENT\":\n            return state + 1;\n        case \"DECREMENT\":\n            return state - 1;\n        default: \n            return state;\n    }\n};\n\nexport default counter;","import reducer from \"./reducer.js\";\nimport { combineReducers } from \"redux\";\n\nconst rootReducer = combineReducers({\n    reducer\n});\n\nexport default rootReducer;","import { createStore } from \"redux\";\nimport rootReducer from \"./reducers/index\";\n\n\nconst store = createStore(\n        rootReducer\n    )\n\n    export default store;\n","import React, { Component, createContext, useContext } from \"react\";\nimport createAuth0Client from \"@auth0/auth0-spa-js\";\n\n// Create the context\nexport const Auth0Context = createContext();\n\nexport const useAuth0 = () => useContext(Auth0Context);\n\n// Create a provider\nexport class Auth0Provider extends Component {\n    state = {\n        auth0Client: null,\n        isLoading: true,\n        isAuthenticated: false,\n        user: null\n    };\n\n    config = {\n        domain: process.env.REACT_APP_AUTH0_DOMAIN,\n        client_id: process.env.REACT_APP_AUTH0_CLIENT_ID,\n        redirect_uri: window.location.origin\n    };\n\n    componentDidMount() {\n        console.log(process.env.REACT_APP_AUTH0_DOMAIN);\n        console.log(process.env.REACT_APP_AUTH0_CLIENT_ID)\n        this.initializeAuth0();\n    };\n\n    // Initialize the auth0 library\n    initializeAuth0 = async () => {\n        const auth0Client = await createAuth0Client(this.config);\n\n        this.setState({ auth0Client });\n\n        // Check to see if they have been redirected after login\n        if(window.location.search.includes(\"code=\")) {\n            return this.handleRedirectCallback();\n        };\n\n        const isAuthenticated = await auth0Client.isAuthenticated();\n        const user = isAuthenticated ? await auth0Client.getUser() : null;\n\n        this.setState({ isLoading: false, isAuthenticated, user });\n    };\n\n    // Handles the authentication callback\n    handleRedirectCallback = async () => {\n        this.setState({ isLoading: true });\n\n        await this.state.auth0Client.handleRedirectCallback();\n        const user = await this.state.auth0Client.getUser();\n\n        this.setState({ user, isAuthenticated: true, isLoading: false });\n        window.history.replaceState({}, document.title, window.location.pathname);\n    };\n\n    render() {\n        const { auth0Client, isLoading, isAuthenticated, user } = this.state;\n        const { children } = this.props;\n\n        const configObject = {\n            isLoading,\n            isAuthenticated,\n            user,\n            loginWithRedirect: (...p) => auth0Client.loginWithRedirect(...p),\n            getTokenSilently: (...p) => auth0Client.getTokenSilently(...p),\n            getIdTokenClaims: (...p) => auth0Client.getIdTokenClaims(...p),\n            logout: (...p) => auth0Client.logout(...p)\n        };\n\n        return(\n            <Auth0Context.Provider value={configObject}>\n                {children}\n            </Auth0Context.Provider>\n        )\n    }\n}","import { createBrowserHistory } from \"history\";\nexport default createBrowserHistory();","import React, { useEffect, useState } from 'react';\n\nfunction RevealText({ text, maxLength }) {\n    const [hidden, setHidden] = useState(true);\n    if (text.length <= maxLength) {\n        return <span>{text} </span>\n    }\n\n    return (\n        <span>\n            {hidden ? text.substr(0, maxLength) : text + `\\n`}\n            {hidden ? (\n                <a onClick={() => setHidden(false)}> Read more </a>\n            ) : (\n                    <a onClick={() => setHidden(true)}>Read Less</a>\n                )}\n        </span>\n    )\n}\n\nexport default RevealText;","import React from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport allActions from \"../../actions/index\";\nimport RevealText from \"../textState\";\n\nconst Home = () => {\n\n  const counter = useSelector(state => state.reducer);\n\n  const dispatch = useDispatch();\n\n  return (\n      <div className=\"Home\">\n        {/* <h1>Hello World</h1>\n        <h1>Counter: {counter}</h1>\n        <button onClick={() => dispatch(allActions.actions.increment())}>Add!</button>\n        <button onClick={() => dispatch(allActions.actions.decrement())}>Decrease!</button>\n        <RevealText maxLength={15} text=\"howdy howdy howdy howdy howdy howdy howdy howdy howdy howdy howdy howdy howdy \" /> */}\n      </div>\n\n  );\n}\n\nexport default Home;","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst NavBar = () => {\n\n    return (\n        <div>\n            <div>\n                {/* <button onClick={() => loginWithRedirect({})} > Login</button > */}\n            </div>\n\n            <div>\n                {/* <button onClick={() => logout()}>Log Out</button> */}\n                <button><Link to=\"/profile\">Profile</Link></button>\n            </div >\n        </div>\n    )\n}\n\n\nexport default NavBar;\n","import React from 'react';\n\nconst Profile = () => {    \n    \n    return (\n        <div>\n            Profile\n        </div>\n\n    )\n}\n\nexport default Profile;","import React from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport Home from \"./components/pages/Home\";\nimport NavBar from \"./components/NavBar\";\nimport { useAuth0 } from \"./contexts/auth0-context\";\nimport Profile from \"./components/pages/Profile\";\nimport './App.css';\n\nconst App = () => {\n\n  const { isLoading, user, loginWithRedirect, logout } = useAuth0();\n\n  if (isLoading) {\n    return <div>Loading...</div> \n  }\n\n  return (\n    <Router>\n      <div className=\"App\">\n        <button onClick={loginWithRedirect}>Log In</button>\n        <button onClick={logout}>Log out</button>\n\n        {!isLoading && user && (\n           <h1>Hello, {user.given_name}!</h1>\n        )}\n        <NavBar />\n        <Switch>\n          <Route exact path=\"/\" component={Home}/>\n          <Route path=\"/profile\" component={Profile}/>\n        </Switch>\n      </div>\n    </Router>\n\n  );\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport { Auth0Provider } from \"./contexts/auth0-context\";\n// import config from \"./auth_config.json\";\nimport history from \"./utils/history\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// A function that routes the user to the right place after login.\nconst onRedirectCallback = appState => {\n    history.push(\n        appState && appState.targetUrl\n            ? appState.targetUrl\n            : window.location.pathname\n    )\n}\n\nReactDOM.render(\n    <Auth0Provider>\n        <Provider store={store}>\n            <App />\n        </Provider>\n    </Auth0Provider>\n\n    , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}